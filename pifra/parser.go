// Code generated by goyacc -o parser.go -v parser.output parser.y. DO NOT EDIT.

//line parser.y:2
package pifra

import __yyfmt__ "fmt"

//line parser.y:2
var undeclaredProcs []Element

var curProcParams []string

// All elements
var curElem Element // Tracks the current element chain

// Process Constants element
var curPconstNames []Name // Tracks the process constant names

// Sum element
var curSum Element         // Current sum process.
var sumStack []Element     // Sum processes encountered.
var curSumLevel int        // Current sum element level.
var curSumLevelStack []int // Saves curSumLevel at different bracket levels.
var numSumStack []int      // Saves the maximum curSumLevel at different bracket levels.
// Used for knowing how many elements to pop from sumStack.

// Parallel element
var curPar Element         // Current parallel process.
var parStack []Element     // Parallel processes encountered.
var curParLevel int        // Current parallel element level.
var curParLevelStack []int // Saves curParLevel at different bracket levels.
var numParStack []int      // Saves the maximum curParLevel at different bracket levels.
// Used for knowing how many elements to pop from parStack.

//line parser.y:31
type yySymType struct {
	yys  int
	name string
}

const NAME = 57346
const LBRACKET = 57347
const RBRACKET = 57348
const LANGLE = 57349
const RANGLE = 57350
const LSQBRACKET = 57351
const RSQBRACKET = 57352
const COMMA = 57353
const EQUAL = 57354
const VERTBAR = 57355
const DOT = 57356
const COMMENT = 57357
const ZERO = 57358
const APOSTROPHE = 57359
const DOLLARSIGN = 57360
const PLUS = 57361
const EXCLAMATION = 57362
const LOWPREC = 57363
const LOWER_THAN_LBRACKET = 57364

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"NAME",
	"LBRACKET",
	"RBRACKET",
	"LANGLE",
	"RANGLE",
	"LSQBRACKET",
	"RSQBRACKET",
	"COMMA",
	"EQUAL",
	"VERTBAR",
	"DOT",
	"COMMENT",
	"ZERO",
	"APOSTROPHE",
	"DOLLARSIGN",
	"PLUS",
	"EXCLAMATION",
	"LOWPREC",
	"LOWER_THAN_LBRACKET",
}
var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line yacctab:1
var yyExca = [...]int{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 47,
	12, 8,
	-2, 35,
	-1, 67,
	12, 8,
	-2, 35,
}

const yyPrivate = 57344

const yyLast = 90

var yyAct = [...]int{

	7, 32, 34, 36, 19, 42, 6, 19, 20, 53,
	27, 20, 23, 43, 26, 22, 28, 21, 22, 24,
	21, 28, 27, 61, 25, 35, 48, 27, 26, 71,
	41, 64, 44, 63, 78, 55, 45, 69, 25, 70,
	51, 52, 70, 74, 65, 56, 57, 67, 58, 59,
	47, 50, 46, 37, 75, 46, 66, 62, 60, 54,
	49, 38, 68, 33, 31, 72, 73, 30, 29, 40,
	39, 18, 76, 59, 17, 77, 16, 15, 14, 13,
	12, 11, 10, 9, 8, 5, 4, 3, 2, 1,
}
var yyPact = [...]int{

	-1000, 2, -1000, -1000, -1000, -1000, 7, 8, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	63, 60, -1000, 59, -1, 46, 57, -1000, -1000, -1,
	-7, 18, 24, 44, -1000, 8, 21, 56, 43, -1,
	-1, 3, 55, 23, -1, -1, 54, 9, 53, 25,
	17, -9, 8, -1000, 34, 52, -1000, 8, -1000, -1000,
	41, -1, 31, 15, -1, -1, 33, -1000, -1000, 9,
	50, -1, -1000, 8, -1, 28, -1000, 8, -1000,
}
var yyPgo = [...]int{

	0, 89, 88, 87, 86, 85, 1, 0, 84, 83,
	82, 81, 80, 79, 78, 77, 76, 74, 71, 70,
	69, 2, 68,
}
var yyR1 = [...]int{

	0, 1, 1, 2, 2, 2, 3, 6, 6, 4,
	5, 7, 7, 7, 7, 7, 7, 7, 7, 7,
	7, 7, 16, 11, 11, 12, 13, 14, 15, 19,
	10, 20, 9, 18, 21, 21, 17, 22, 8,
}
var yyR2 = [...]int{

	0, 0, 2, 1, 1, 1, 5, 3, 2, 3,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 7, 6, 6, 6, 7, 4, 0,
	4, 0, 4, 3, 3, 2, 1, 0, 4,
}
var yyChk = [...]int{

	-1000, -1, -2, -3, -4, -5, 4, -7, -8, -9,
	-10, -11, -12, -13, -14, -15, -16, -17, -18, 5,
	9, 18, 16, 5, 12, 17, 7, 19, 13, -22,
	4, 4, -6, 4, -21, -7, 4, 7, 4, -19,
	-20, -7, 12, 20, 14, 12, 11, 6, 5, 4,
	8, -7, -7, 6, 4, 12, -7, -7, -6, -21,
	4, 14, 4, 8, 14, 10, 4, 6, -7, 6,
	11, 14, -7, -7, 10, 4, -7, -7, 6,
}
var yyDef = [...]int{

	1, -2, 2, 3, 4, 5, 36, 10, 11, 12,
	13, 14, 15, 16, 17, 18, 19, 20, 21, 37,
	0, 0, 22, 0, 0, 0, 0, 29, 31, 0,
	0, 0, 0, 0, 33, 9, 36, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, -2, 0, 0,
	0, 30, 32, 38, 0, 0, 28, 6, 7, 34,
	0, 0, 0, 0, 0, 0, 0, -2, 25, 35,
	0, 0, 24, 26, 0, 0, 23, 27, 35,
}
var yyTok1 = [...]int{

	1,
}
var yyTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22,
}
var yyTok3 = [...]int{
	0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := yyPact[state]
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && yyChk[yyAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || yyExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := yyExca[i]
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = yyTok1[0]
		goto out
	}
	if char < len(yyTok1) {
		token = yyTok1[char]
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = yyTok2[char-yyPrivate]
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = yyTok3[i+0]
		if token == char {
			token = yyTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = yyTok2[1] /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = yyPact[yystate]
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = yyAct[yyn]
	if yyChk[yyn] == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = yyDef[yystate]
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && yyExca[xi+1] == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = yyExca[xi+0]
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = yyExca[xi+1]
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = yyPact[yyS[yyp].yys] + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = yyAct[yyn] /* simulate a shift of "error" */
					if yyChk[yystate] == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= yyR2[yyn]
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = yyR1[yyn]
	yyg := yyPgo[yyn]
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = yyAct[yyg]
	} else {
		yystate = yyAct[yyj]
		if yyChk[yystate] != -yyn {
			yystate = yyAct[yyg]
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 6:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:72
		{
			// Reverse order of curProcParams
			for i := len(curProcParams)/2 - 1; i >= 0; i-- {
				j := len(curProcParams) - 1 - i
				curProcParams[i], curProcParams[j] = curProcParams[j], curProcParams[i]
			}
			name := yyDollar[1].name
			DeclaredProcs[name] = DeclaredProcess{
				Process:    curElem,
				Parameters: curProcParams,
			}
			curElem = nil
			curProcParams = []string{}

			Log("pconst decl")
		}
	case 7:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:91
		{
			curProcParams = append(curProcParams, yyDollar[1].name)
		}
	case 8:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:96
		{
			curProcParams = append(curProcParams, yyDollar[1].name)
		}
	case 9:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:102
		{
			name := yyDollar[1].name
			DeclaredProcs[name] = DeclaredProcess{
				Process:    curElem,
				Parameters: []string{},
			}
			curElem = nil

			Log("process")
		}
	case 10:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:115
		{
			undeclaredProcs = append(undeclaredProcs, curElem)
			curElem = nil
		}
	case 22:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:145
		{
			Log("nil")
			curElem = &ElemNil{}
		}
	case 23:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:152
		{
			channel := yyDollar[1].name
			output := yyDollar[4].name
			outputElem := &ElemOutput{
				Channel: Name{
					Name: channel,
				},
				Output: Name{
					Name: output,
				},
				Next: curElem,
			}
			curElem = outputElem

			Log("out:", channel, output)
		}
	case 24:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:170
		{
			channel := yyDollar[1].name
			output := yyDollar[3].name
			outputElem := &ElemOutput{
				Channel: Name{
					Name: channel,
				},
				Output: Name{
					Name: output,
				},
				Next: curElem,
			}
			curElem = outputElem

			Log("out:", channel, output)
		}
	case 25:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:189
		{
			channel := yyDollar[1].name
			input := yyDollar[3].name
			inputElem := &ElemInput{
				Channel: Name{
					Name: channel,
				},
				Input: Name{
					Name: input,
				},
				Next: curElem,
			}
			curElem = inputElem

			Log("inp:", channel, input)
		}
	case 26:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:208
		{
			equalityElem := &ElemEquality{
				NameL: Name{
					Name: yyDollar[2].name,
				},
				NameR: Name{
					Name: yyDollar[4].name,
				},
				Next: curElem,
			}
			curElem = equalityElem
			Log("equality:", yyDollar[2].name, yyDollar[4].name)
		}
	case 27:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:224
		{
			equalityElem := &ElemEquality{
				Inequality: true,
				NameL: Name{
					Name: yyDollar[2].name,
				},
				NameR: Name{
					Name: yyDollar[5].name,
				},
				Next: curElem,
			}
			curElem = equalityElem
			Log("inequality:", yyDollar[2].name, yyDollar[5].name)
		}
	case 28:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:241
		{
			resElem := &ElemRestriction{
				Restrict: Name{
					Name: yyDollar[2].name,
				},
				Next: curElem,
			}
			curElem = resElem
			Log("new:", yyDollar[2].name)
		}
	case 29:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:254
		{
			// Track the maximum curSumLevel, i.e. no. of sums at this
			// bracket level.
			if curSumLevel == 0 {
				numSumStack = append(numSumStack, curSumLevel)
			}
			_, numSumStack = pop(numSumStack)
			numSumStack = append(numSumStack, curSumLevel)

			sumStack = append(sumStack, curElem)
			curElem = nil
			curSumLevel = curSumLevel + 1

			Log("+")
		}
	case 30:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:270
		{
			curSumLevel = curSumLevel - 1
			if curSumLevel == 0 {
				// Create sum element using penultimate element and
				// terminal element.
				elem := popSumStack()
				sumTerminal := &ElemSum{
					ProcessL: elem,
					ProcessR: curElem,
				}
				curSum = sumTerminal

				// Append sum processes (up to no. of sums at this level)
				// to form right-leaning sum element tree.
				var numSum int
				numSum, numSumStack = pop(numSumStack)
				for i := 0; i < numSum; i++ {
					elem = popSumStack()
					sumNonTerminal := &ElemSum{
						ProcessL: elem,
						ProcessR: curSum,
					}
					curSum = sumNonTerminal
				}
				curElem = curSum
			}
		}
	case 31:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:300
		{
			// Track the maximum curParLevel, i.e. no. of parallels at this
			// bracket level.
			if curParLevel == 0 {
				numParStack = append(numParStack, curParLevel)
			}
			_, numParStack = pop(numParStack)
			numParStack = append(numParStack, curParLevel)

			parStack = append(parStack, curElem)
			curElem = nil
			curParLevel = curParLevel + 1

			Log("|")
		}
	case 32:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:316
		{
			curParLevel = curParLevel - 1
			if curParLevel == 0 {
				// Create parallel element using penultimate element and
				// terminal element.
				elem := popParStack()
				parTerminal := &ElemParallel{
					ProcessL: elem,
					ProcessR: curElem,
				}
				curPar = parTerminal

				// Append parallel processes (up to no. of parallels at this level)
				// to form right-leaning parallel element tree.
				var numPar int
				numPar, numParStack = pop(numParStack)
				for i := 0; i < numPar; i++ {
					elem = popParStack()
					parNonTerminal := &ElemParallel{
						ProcessL: elem,
						ProcessR: curPar,
					}
					curPar = parNonTerminal
				}
				curElem = curPar
			}
		}
	case 33:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:346
		{
			// Reverse order of curPconstNames
			for i := len(curPconstNames)/2 - 1; i >= 0; i-- {
				j := len(curPconstNames) - 1 - i
				curPconstNames[i], curPconstNames[j] = curPconstNames[j], curPconstNames[i]
			}
			name := yyDollar[1].name
			pconstElem := &ElemProcess{
				Name:       name,
				Parameters: curPconstNames,
			}
			curElem = pconstElem
			curPconstNames = []Name{}
			Log("pconsts:", name)
		}
	case 34:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:364
		{
			curPconstNames = append(curPconstNames, Name{
				Name: yyDollar[1].name,
			})
		}
	case 35:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:371
		{
			curPconstNames = append(curPconstNames, Name{
				Name: yyDollar[1].name,
			})
		}
	case 36:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:379
		{
			name := yyDollar[1].name
			processElem := &ElemProcess{
				Name: name,
			}
			curElem = processElem
			Log("process:", name)
		}
	case 37:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:390
		{
			// Sum elements:
			// Save no. of sum on stack.
			curSumLevelStack = append(curSumLevelStack, curSumLevel)
			// Reset no. of sums.
			curSumLevel = 0

			// Parallel elements:
			// Save no. of parallels on stack.
			curParLevelStack = append(curParLevelStack, curParLevel)
			// Reset no. of parallels.
			curParLevel = 0
			Log("(")
		}
	case 38:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:405
		{
			// Sum elements:
			// Restore upper level no. of sums.
			curSumLevel, curSumLevelStack = pop(curSumLevelStack)

			// Parallel elements:
			// Restore upper level no. of parallels.
			curParLevel, curParLevelStack = pop(curParLevelStack)
			Log(")")
		}
	}
	goto yystack /* stack new state and value */
}
